#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
utils.py - –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞–º–µ—Ç–∫–∞–º–∏
"""

from datetime import datetime


def create_note(text):
    """
    –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–º–µ—Ç–∫—É
    
    Args:
        text (str): –¢–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏
        
    Returns:
        dict: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –∑–∞–º–µ—Ç–∫–∏
    """
    note = {
        'text': text,
        'created': datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    }
    return note


def add_note(database, text):
    """
    –î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    
    Args:
        database: –û–±—ä–µ–∫—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        text (str): –¢–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏
        
    Returns:
        bool: True –µ—Å–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ
    """
    if not text or not text.strip():
        print("\n‚úó –¢–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!")
        return False
    
    note = create_note(text)
    database.add_note(note)
    notes_count = database.get_notes_count()
    print(f"\n‚úì –ó–∞–º–µ—Ç–∫–∞ #{notes_count} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
    return True


def show_all_notes(database):
    """
    –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞–º–µ—Ç–∫–∏
    
    Args:
        database: –û–±—ä–µ–∫—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    """
    notes = database.get_all_notes()
    
    if not notes:
        print("\nüìù –°–ø–∏—Å–æ–∫ –∑–∞–º–µ—Ç–æ–∫ –ø—É—Å—Ç.")
        return
    
    print("\n" + "=" * 60)
    print("üìù –°–ü–ò–°–û–ö –ó–ê–ú–ï–¢–û–ö")
    print("=" * 60)
    
    for index, note in enumerate(notes, start=1):
        print(f"\n[{index}] {note['created']}")
        print(f"    {note['text']}")
    
    print("\n" + "=" * 60)
    print(f"–í—Å–µ–≥–æ –∑–∞–º–µ—Ç–æ–∫: {len(notes)}")


def delete_note(database, note_number):
    """
    –£–¥–∞–ª–∏—Ç—å –∑–∞–º–µ—Ç–∫—É –ø–æ –Ω–æ–º–µ—Ä—É
    
    Args:
        database: –û–±—ä–µ–∫—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        note_number (int): –ù–æ–º–µ—Ä –∑–∞–º–µ—Ç–∫–∏ (–Ω–∞—á–∏–Ω–∞—è —Å 1)
        
    Returns:
        bool: True –µ—Å–ª–∏ —É–¥–∞–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ
    """
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –Ω–æ–º–µ—Ä –≤ –∏–Ω–¥–µ–∫—Å (–Ω—É–º–µ—Ä–∞—Ü–∏—è —Å 1, –∏–Ω–¥–µ–∫—Å—ã —Å 0)
    index = note_number - 1
    
    if database.remove_note(index):
        print(f"\n‚úì –ó–∞–º–µ—Ç–∫–∞ #{note_number} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!")
        return True
    else:
        print(f"\n‚úó –ó–∞–º–µ—Ç–∫–∞ #{note_number} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        return False


def format_note(note, index):
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–º–µ—Ç–∫—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    
    Args:
        note (dict): –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –∑–∞–º–µ—Ç–∫–∏
        index (int): –ù–æ–º–µ—Ä –∑–∞–º–µ—Ç–∫–∏
        
    Returns:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
    """
    return f"[{index}] {note['created']} - {note['text']}"


def search_notes(database, keyword):
    """
    –ü–æ–∏—Å–∫ –∑–∞–º–µ—Ç–æ–∫ –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É
    
    Args:
        database: –û–±—ä–µ–∫—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        keyword (str): –ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª—è –ø–æ–∏—Å–∫–∞
        
    Returns:
        list: –°–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∑–∞–º–µ—Ç–æ–∫ —Å –∏—Ö –∏–Ω–¥–µ–∫—Å–∞–º–∏
    """
    notes = database.get_all_notes()
    results = []
    
    keyword_lower = keyword.lower()
    for index, note in enumerate(notes, start=1):
        if keyword_lower in note['text'].lower():
            results.append((index, note))
    
    return results


def display_search_results(results):
    """
    –û—Ç–æ–±—Ä–∞–∑–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
    
    Args:
        results (list): –°–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π (–∏–Ω–¥–µ–∫—Å, –∑–∞–º–µ—Ç–∫–∞)
    """
    if not results:
        print("\nüìù –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return
    
    print("\n" + "=" * 60)
    print(f"üîç –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–û–ò–°–ö–ê (–Ω–∞–π–¥–µ–Ω–æ: {len(results)})")
    print("=" * 60)
    
    for index, note in results:
        print(f"\n[{index}] {note['created']}")
        print(f"    {note['text']}")
    
    print("\n" + "=" * 60)

